/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * viewloader.java
 *
 * Created on 23 Apr, 2010, 10:53:12 PM
 */

package samplerequest;


import java.io.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author root
 */
public class viewloader extends javax.swing.JFrame {

    /** Creates new form viewloader */
    public viewloader() {

//        initComponents();

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Cpu usage");

        jLabel2.setText("No of Requests");

        jLabel3.setText("Total accesses");

        jLabel4.setText("Traffic");

        jLabel6.setText("jLabel6");

        jLabel7.setText("jLabel7");

        jLabel8.setText("jLabel8");

        jLabel9.setText("jLabel9");

        jLabel11.setText("jLabel11");

        jLabel12.setText("jLabel12");

        jLabel13.setText("jLabel13");

        jLabel14.setText("jLabel14");

        jLabel15.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(249, 18, 18));
        jLabel15.setText(" ");

        jButton1.setText("start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(304, 304, 304)
                .addComponent(jButton1)
                .addGap(108, 108, 108)
                .addComponent(jButton2)
                .addContainerGap(381, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(162, 162, 162)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel9))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addGap(198, 198, 198))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel2)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel3)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel7)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel8)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel11)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel12)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel13)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel14)))
                .addGap(47, 47, 47)
                .addComponent(jLabel15)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        FileInputStream fin3 = null;
        try {
           String line2;
            double Thcpuload = 0.0;
            double Thtraffic = 0.0;
            double time=0.0;
            int Thaccesses = 0;
            int Thprocesses= 0;
            
            FileInputStream fin2 = new FileInputStream("variables.txt");
            BufferedReader buf2 = new BufferedReader(new InputStreamReader(fin2));
int n1 = 0;
String input = "";
                    if ((input= buf2.readLine())!= null)

Thcpuload = Double.parseDouble(input) ;
                    if ((input= buf2.readLine())!= null)

                                Thtraffic = Double.parseDouble(input);
            
                    if ((input= buf2.readLine())!= null)
                               Thaccesses = Integer.parseInt(input);
                    if ((input= buf2.readLine())!= null)
                                Thprocesses = Integer.parseInt(input);
            

            System.out.println( "cpuload = "+Thcpuload + "\ntraffic =  "+Thtraffic +"\nThaccesses = "+Thaccesses+"\nThprocesses = "+Thprocesses  );
            fin2.close();
            int flag;
            for (;;) {
                try {
                    FileInputStream fin = null;
//            for (;;)
//            {
                    int nm = 0;
                    while (nm < 1000000000) {
                        nm++;
                    }
                    int n;
                    String str = "";
                    String cmd = "";
                    String ip = "";
                    //String filepath = "/var/log/apache2/access.log";
                    //String filepath2 = "/root/PROJECT/fileout";
                    //fin = new FileInputStream(filepath);
                    // FileOutputStream fout = new FileOutputStream(filepath2);
// calculating cpu usage
                    Runtime r = Runtime.getRuntime();
                    Thread.sleep(1000);
                    Process p1 = r.exec("rm  server-status");
                    Thread.sleep(1000);
                    Process p2 = r.exec("wget http://127.0.0.1/server-status");
                    Process p3 = r.exec("rm  input.txt");
                    Thread.sleep(2000);
                    Process p4 = r.exec("./cpuusage.sh");
                    System.out.println("after cpu usage");
                    Process p5 = r.exec("./noofreq.sh");
                    Process p6 = r.exec("./accesses.sh");
//            FileInputStream fin1 = new FileInputStream("/root/input.txt");
                    //int n1;
                    String str1 = "";
                    String line1 = "";
                    // BufferedReader buf1 = new BufferedReader(new InputStreamReader(fin1));
                    int chumma = 0;
                    double cpuusage1 = 0.0;
                    int processes = 0;
                    double traffic = 0.0;
                    double accesses = 0.0;
                    String unit = "";
//while((line1 = buf1.readLine()) != null) {
//	System.out.println("chumma = " +chumma);
                    System.out.println("chumma=" + chumma);
                    Thread.sleep(3000);
                    FileInputStream fin1 = new FileInputStream("input.txt");
                    BufferedReader buf1 = new BufferedReader(new InputStreamReader(fin1));
                    if ((line1 = buf1.readLine()) != null) {
                        String[] var = line1.split(" ");
                        String temp = var[7].replace("%", " ");
                        temp = temp.trim();
                        cpuusage1 = Double.parseDouble(temp);
                        chumma = 1;
                        System.out.println("cpuusage =  " + cpuusage1);
                    }
                    if ((line1 = buf1.readLine()) != null) {
                        processes = Integer.parseInt(line1);
                        System.out.println("No of requests : " + processes);
                        chumma = 2;
                    }
                    if ((line1 = buf1.readLine()) != null) {
                        String[] var = line1.split(" ");
                        String temp = var[2];
                        temp = temp.trim();
                        String temp1 = var[6];
                        String temp2 = var[7];
                        temp1 = temp1.trim();
                        String[] varss = temp2.split("<");
                        temp2 = varss[0];
                        temp2 = temp2.toUpperCase();
                        accesses = Double.parseDouble(temp);
                        traffic = Double.parseDouble(temp1);
                        unit = temp2;
                        System.out.println("access = " + temp);
                        System.out.println("traffic = " + traffic);
//	System.out.println("processes : "+processes);
//	System.out.println("cpuusage1 : "+cpuusage1);
//	System.out.println("unit      : "+unit);
//	System.out.println("traffic   : "+traffic);S
                        flag = 0;
                        //jLabel11.setText(Double.toString(cpuusage1));
                        //jLabel12.setText(Double.toString(processes));
                        //jLabel13.setText(Double.toString(accesses));
                        //jLabel14.setText(traffic+unit);
                        System.out.println( processes+"> " + Thprocesses + "\n"+ cpuusage1 + ">"+ Thcpuload +"\n"+ unit +" ==  MB"  + traffic +" > "+Thtraffic+"\n" +  accesses + " > "+Thaccesses);
                        if (processes > Thprocesses && cpuusage1 > Thcpuload) {
                            System.out.println("inside first if");
                            if (unit.equals("MB") && traffic > Thtraffic && accesses > Thaccesses) {
                                System.out.println("inside second if");
                                System.out.println("System currently overloaded due to more requests");
                                System.out.println("cpu usage = " + cpuusage1);
                                System.out.println("processes = " + processes);
                                System.out.println("traffic  = " + traffic + unit + "\n \n ");
                                jLabel6.setText(Double.toString(Thcpuload));
                                jLabel7.setText(Double.toString(Thprocesses));
                                jLabel8.setText(Double.toString(Thaccesses));
                                jLabel9.setText(Double.toString(Thtraffic));
                                jLabel11.setText(Double.toString(cpuusage1));
                                jLabel12.setText(Double.toString(processes));
                                jLabel13.setText(Double.toString(accesses));
                                jLabel14.setText(traffic + unit);
//^						System.exit(0);
                                flag = 1;
                                jLabel15.setText(" over loaded");




                                
                            }
                        }
                        if (flag == 1) {
                            break;
                        }
//	for ( int mn =0 ;  mn<1000000000; mn++)
//			{}
                        fin1.close();
//	}
                        //continue;
                        if (flag == 1) {
                            break;
                        }
                    }
                } catch (Exception ex) {
                    System.out.println("Exception received : " + ex);
                    ex.printStackTrace();
                    String[] str = {"chumma", "hai"};
                    viewloader.main(str);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(viewloader.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fin3.close();
            } catch (IOException ex) {
                Logger.getLogger(viewloader.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewloader().setVisible(true);
            }
        });
    }
public void dispose() {
        super.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables

}
